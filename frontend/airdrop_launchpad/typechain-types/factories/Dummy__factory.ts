/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Dummy, DummyInterface } from "../Dummy";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newCount",
        type: "uint256",
      },
    ],
    name: "Inc",
    type: "event",
  },
  {
    inputs: [],
    name: "addCount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506101b68061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636cefce6e1461003b578063a87d942c14610045575b600080fd5b610043610063565b005b61004d6100cc565b60405161005a91906100ee565b60405180910390f35b60008081548092919061007590610138565b91905055503373ffffffffffffffffffffffffffffffffffffffff167f6b07fcd3669b4d294be20909083ae85c5c58a5c102ea0a2d6486a51f210e29ce6000546040516100c291906100ee565b60405180910390a2565b60008054905090565b6000819050919050565b6100e8816100d5565b82525050565b600060208201905061010360008301846100df565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610143826100d5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361017557610174610109565b5b60018201905091905056fea2646970667358221220cfe69219715e9390405331a3d7588ee3227b298d965c10672447111dd654183964736f6c634300081c0033";

type DummyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Dummy__factory extends ContractFactory {
  constructor(...args: DummyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Dummy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Dummy__factory {
    return super.connect(runner) as Dummy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyInterface {
    return new Interface(_abi) as DummyInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Dummy {
    return new Contract(address, _abi, runner) as unknown as Dummy;
  }
}
